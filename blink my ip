#include <Arduino.h>
#include "secrets.h"
#include <WiFi.h>
#include <ESPmDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
static IPAddress ip;

const char* ssid = secret_ssid;
const char* password = secret_pass;
// the number of the LED pin
const int ONBOARD_LED = 2;  // 16 corresponds to GPIO16
// setting PWM properties
const int freq = 209500;
const int ledChannel = 0;
const int resolution = 8;
String hostname = "ota";

void blinkByte(byte value, byte pin)  {



  byte part;

  byte i;

  //Serial.println("Mark ");

  pinMode(pin, OUTPUT);
  Serial.print("Blinking value: ");  Serial.println(value);

 

  part = value / 100 % 10;

  Serial.print(part); Serial.print(" , ");

  for (i = 0; i < part; i++) {

    digitalWrite(pin, HIGH);

    delay(100);

    digitalWrite(pin, LOW);

    delay(250);

  }

  delay (1000);

 

  part = value / 10 % 10;  
  Serial.print(part); Serial.print(" , ");

  for (i = 0; i < part; i++) {

    digitalWrite(pin, HIGH);

    delay(100);

    digitalWrite(pin, LOW);

    delay(250);

  }

    delay(1000);


  part = value % 10; 

  Serial.print(part); Serial.print("  ");

  for (i = 0; i < part; i++) {

    digitalWrite(pin, HIGH);

    delay(100);

    digitalWrite(pin, LOW);

    delay(250);

  }

}

void pwmLedAsWifiConnected () {
  
    while (WiFi.status() == WL_CONNECTED) {
      
        // increase the LED brightness
      for(int dutyCycle = 0; dutyCycle <= 255; dutyCycle++){   
        // changing the LED brightness with PWM
        ledcWrite(ledChannel, dutyCycle);
        delay(5);
      }
      // decrease the LED brightness
      for(int dutyCycle = 255; dutyCycle >= 0; dutyCycle--){
        // changing the LED brightness with PWM
        ledcWrite(ledChannel, dutyCycle);   
        delay(5);
      }
      
      // When WIFI disconnects blink fast my led and reboot
      while (WiFi.status() != WL_CONNECTED) {
      Serial.println("Connection Failed! Rebooting...");  
      pinMode(ONBOARD_LED, OUTPUT);
      digitalWrite(ONBOARD_LED, HIGH);
      delay(50);
      digitalWrite(ONBOARD_LED, LOW);
      delay(50);
      digitalWrite(ONBOARD_LED, HIGH);
      delay(50);
      digitalWrite(ONBOARD_LED, LOW);
      delay(50);
      digitalWrite(ONBOARD_LED, HIGH);
      delay(50);
      digitalWrite(ONBOARD_LED, LOW);
      delay(50);
      digitalWrite(ONBOARD_LED, HIGH);
      delay(50);
      digitalWrite(ONBOARD_LED, LOW);
      delay(50);
      digitalWrite(ONBOARD_LED, HIGH);
      delay(50);
      digitalWrite(ONBOARD_LED, LOW);
      delay(50);
      digitalWrite(ONBOARD_LED, HIGH);
      delay(50);
      digitalWrite(ONBOARD_LED, LOW);
      delay(50);
      digitalWrite(ONBOARD_LED, HIGH);
      delay(50);
      digitalWrite(ONBOARD_LED, LOW);
      delay(50);
      digitalWrite(ONBOARD_LED, HIGH);
      delay(50);
      digitalWrite(ONBOARD_LED, LOW);
      delay(50);

      ESP.restart();
      
      }

    }


}

void wifiInit(){
WiFi.mode(WIFI_STA);
  WiFi.config(INADDR_NONE, INADDR_NONE, INADDR_NONE, INADDR_NONE);
  WiFi.setHostname(hostname.c_str());
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(1000);
    
    pinMode(ONBOARD_LED, OUTPUT);
    digitalWrite(ONBOARD_LED, HIGH);
    delay(29);
    digitalWrite(ONBOARD_LED, LOW);
    delay(25);
    ESP.restart();
  }

  ip = WiFi.localIP();

}

void basicOta() {

  
  // Port defaults to 3232
  // ArduinoOTA.setPort(3232);

  // Hostname defaults to esp3232-[MAC]
  // ArduinoOTA.setHostname("myesp32");

  // No authentication by default
  // ArduinoOTA.setPassword("admin");

  // Password can be set with it's md5 value as well
  // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
  // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

  ArduinoOTA
    .onStart([]() {
      String type;
      if (ArduinoOTA.getCommand() == U_FLASH)
        type = "sketch";
      else // U_SPIFFS
        type = "filesystem";

      // NOTE: if updating SPIFFS this would be the place to unmount SPIFFS using SPIFFS.end()
      Serial.println("Start updating " + type);
    })
    .onEnd([]() {
      Serial.println("\nEnd");
    })
    .onProgress([](unsigned int progress, unsigned int total) {
      Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    })
    .onError([](ota_error_t error) {
      Serial.printf("Error[%u]: ", error);
      if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
      else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
      else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
      else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
      else if (error == OTA_END_ERROR) Serial.println("End Failed");
    });

  ArduinoOTA.begin();

}

void setup() {
  Serial.begin(115200);
  Serial.println("Booting");
  
  wifiInit();
  basicOta();

  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  if(!MDNS.begin("ota")) {
     Serial.println("Error starting mDNS");
   return;
  }

  blinkByte(ip[3], ONBOARD_LED);

  // configure LED PWM functionalitites
  ledcSetup(ledChannel, freq, resolution);
  
  // attach the channel to the GPIO to be controlled
  ledcAttachPin(ONBOARD_LED, ledChannel);


}

void loop() {
  ArduinoOTA.handle();

  pwmLedAsWifiConnected ();



}

